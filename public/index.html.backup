<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Talk Show</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; background: #1a1d29; color: white; padding: 20px; }
        .container { max-width: 900px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 40px; }
        .logo { font-size: 3em; font-weight: 700; margin-bottom: 20px; background: linear-gradient(135deg, #ffffff 0%, #a0a0a0 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }
        .form-group { margin-bottom: 20px; }
        .form-label { display: block; margin-bottom: 8px; font-weight: 500; }
        .form-input, .form-select { width: 100%; padding: 12px; background: #2a2d3a; border: 1px solid #3a3d4a; border-radius: 8px; color: white; font-size: 1em; }
        .form-input:focus, .form-select:focus { border-color: #d2691e; outline: none; }
        .btn { padding: 12px 24px; margin: 8px; background: #d2691e; color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; }
        .btn:hover:not(:disabled) { background: #bf5e1a; }
        .btn:disabled { opacity: 0.5; cursor: not-allowed; }
        .btn-secondary { background: #4a4d5a; }
        .btn-secondary:hover:not(:disabled) { background: #5a5d6a; }
        .transcription-area { background: #222533; border: 1px solid #3a3d4a; border-radius: 12px; padding: 30px; min-height: 400px; max-height: 500px; overflow-y: auto; margin-top: 30px; }
        .message { margin: 15px 0; padding: 15px; border-radius: 12px; border-left: 4px solid; }
        .message.host { background: #2d3748; border-left-color: #f7fafc; }
        .message.claude { background: #065f46; border-left-color: #10b981; margin-left: auto; max-width: 85%; }
        .message.chatgpt { background: #1e3a8a; border-left-color: #3b82f6; margin-right: auto; max-width: 85%; }
        .message.gemini { background: #7c2d12; border-left-color: #ef4444; margin-left: auto; max-width: 85%; }
        .speaker { font-weight: bold; margin-bottom: 8px; display: flex; align-items: center; gap: 8px; }
        .avatar { width: 20px; height: 20px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 0.8em; font-weight: bold; }
        .avatar.host { background: #f7fafc; color: #2d3748; }
        .avatar.claude { background: #10b981; color: white; }
        .avatar.chatgpt { background: #3b82f6; color: white; }
        .avatar.gemini { background: #ef4444; color: white; }
        .thinking { text-align: center; color: #8b8b8b; font-style: italic; padding: 20px; animation: pulse 2s infinite; }
        @keyframes pulse { 0%, 100% { opacity: 0.6; } 50% { opacity: 1; } }
        .status { display: flex; align-items: center; gap: 8px; margin-bottom: 20px; }
        .status-dot { width: 8px; height: 8px; border-radius: 50%; background: #4caf50; }
        .status-dot.paused { background: #ff9800; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="logo">AI Talk Show</h1>
            <p>Experience immersive AI conversations with Claude, ChatGPT, and Gemini</p>
        </div>
        
        <div class="form-group">
            <label class="form-label" for="topic">Conversation Topic</label>
            <input type="text" id="topic" class="form-input" placeholder="Enter a topic for your AI conversation...">
        </div>
        
        <div class="form-group">
            <label class="form-label" for="mode">Conversation Type</label>
            <select id="mode" class="form-select">
                <option value="debate">Debate</option>
                <option value="collaboration">Collaboration</option>
                <option value="analysis">Analysis</option>
                <option value="comedy">Comedy</option>
            </select>
        </div>
        
        <div style="text-align: center;">
            <button id="startBtn" class="btn">▶ START</button>
            <button id="pauseBtn" class="btn btn-secondary" disabled>⏸ PAUSE</button>
            <button id="resetBtn" class="btn btn-secondary">↻ RESET</button>
        </div>
        
        <div class="status">
            <div class="status-dot" id="statusDot"></div>
            <span id="statusText">Ready</span>
        </div>
        
        <div class="transcription-area" id="transcriptionArea">
            <div style="text-align: center; color: #6b6b6b; padding: 40px;">Your AI conversation will appear here once you click START</div>
        </div>
    </div>

    <script>
        let isRunning = false, isPaused = false, currentTurn = 0, maxTurns = 12, conversation = [];
        let masterPassword = '', isAuthenticated = false;
        const speakers = ['claude', 'chatgpt', 'gemini'];
        const speakerNames = { host: 'Host', claude: 'Claude', chatgpt: 'ChatGPT', gemini: 'Gemini' };
        
        function checkAuthentication() {
            if (!isAuthenticated) {
                masterPassword = prompt('Enter the master password to access AI Talk Show:');
                if (!masterPassword) { alert('Password required!'); return false; }
                isAuthenticated = true;
            }
            return true;
        }
        
        function updateStatus(status, text) {
            document.getElementById('statusDot').className = `status-dot ${status}`;
            document.getElementById('statusText').textContent = text;
        }
        
        async function startShow() {
            if (!checkAuthentication()) return;
            const topic = document.getElementById('topic').value.trim();
            if (!topic) { alert('Please enter a topic!'); return; }
            
            isRunning = true; currentTurn = 0; conversation = [];
            document.getElementById('startBtn').disabled = true;
            document.getElementById('pauseBtn').disabled = false;
            document.getElementById('transcriptionArea').innerHTML = '';
            updateStatus('ready', 'Running');
            
            addMessage('host', `Welcome to AI Talk Show! Today: "${topic}" in ${document.getElementById('mode').value} mode.`);
            setTimeout(() => nextAIResponse(topic, document.getElementById('mode').value), 2000);
        }
        
        async function nextAIResponse(topic, mode) {
            if (!isRunning || currentTurn >= maxTurns) return;
            const currentSpeaker = speakers[currentTurn % speakers.length];
            
            showThinking(currentSpeaker);
            
            try {
                const context = conversation.slice(-2).map(m => `${m.speaker}: ${m.content}`).join('\n');
                const prompt = `Mode: ${mode}\nTopic: ${topic}\nContext: ${context}\n\nYour turn as ${currentSpeaker}. Reply concisely (2-3 sentences max).`;
                const response = await callAI(currentSpeaker, prompt);
                
                removeThinking();
                addMessage(currentSpeaker, response);
                currentTurn++;
                
                if (isRunning && currentTurn < maxTurns) {
                    setTimeout(() => nextAIResponse(topic, mode), 4000);
                }
            } catch (error) {
                removeThinking();
                addMessage('host', `${currentSpeaker} encountered an issue: ${error.message}`);
                currentTurn++;
                if (isRunning && currentTurn < maxTurns) setTimeout(() => nextAIResponse(topic, mode), 2000);
            }
        }
        
        async function callAI(speaker, prompt) {
            const endpoint = speaker === 'claude' ? '/api/claude' : '/api/openai';
            const personalizedPrompt = speaker === 'gemini' ? `Respond as Google Gemini - be creative and innovative.\n\n${prompt}` : prompt;
            
            const response = await fetch(endpoint, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ password: masterPassword, prompt: personalizedPrompt })
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.error || `API failed: ${response.status}`);
            }
            const data = await response.json();
            return data.text;
        }
        
        function addMessage(speaker, content) {
            conversation.push({ speaker, content });
            const div = document.createElement('div');
            div.className = `message ${speaker}`;
            div.innerHTML = `
                <div class="speaker">
                    <div class="avatar ${speaker}">${speaker === 'host' ? 'H' : speaker === 'claude' ? 'C' : 'G'}</div>
                    ${speakerNames[speaker]}
                </div>
                ${content}
            `;
            document.getElementById('transcriptionArea').appendChild(div);
            document.getElementById('transcriptionArea').scrollTop = document.getElementById('transcriptionArea').scrollHeight;
        }
        
        function showThinking(speaker) {
            const div = document.createElement('div');
            div.className = 'thinking';
            div.id = 'thinking-indicator';
            div.innerHTML = `${speakerNames[speaker]} is thinking...`;
            document.getElementById('transcriptionArea').appendChild(div);
            document.getElementById('transcriptionArea').scrollTop = document.getElementById('transcriptionArea').scrollHeight;
        }
        
        function removeThinking() {
            const thinking = document.getElementById('thinking-indicator');
            if (thinking) thinking.remove();
        }
        
        function resetShow() {
            isRunning = false; currentTurn = 0; conversation = [];
            document.getElementById('startBtn').disabled = false;
            document.getElementById('pauseBtn').disabled = true;
            document.getElementById('topic').value = '';
            updateStatus('ready', 'Ready');
            document.getElementById('transcriptionArea').innerHTML = '<div style="text-align: center; color: #6b6b6b; padding: 40px;">Your AI conversation will appear here once you click START</div>';
            removeThinking();
        }
        
        document.getElementById('startBtn').addEventListener('click', startShow);
        document.getElementById('resetBtn').addEventListener('click', resetShow);
    </script>
</body>
</html>
